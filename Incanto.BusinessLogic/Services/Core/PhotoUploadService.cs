using System;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using Incanto.BusinessLogic.Services.Core.Interfaces;

namespace Incanto.BusinessLogic.Services.Core
{
	public enum ImageFormats
	{
		Unknown,
		Png,
		Jpeg
	}

	public class PhotoUploadService : IPhotoUploadService
    {
		/// <summary>
		/// Method for check image by type and format 
		/// </summary>
		/// <param name="inputStream"></param>
		/// <param name="contentType"></param>
		/// <param name="fileSize"></param>
		/// <returns></returns>
		public bool CheckFile(Stream inputStream, string contentType, long fileSize)
		{
			//Check image format by regexp
			if (!Regex.IsMatch(contentType, @"^image/gif|image/jpeg|image/png$"))
			{
				//throw new DataValidationException("invalid logo type, use .gif .jpeg .png");
			}
			//Check image size
			if (fileSize > 1048576)
			{
				//throw new DataValidationException("invalid logo, max size is 1 MB");
			}
			//Check image format using input stream of bytes
			var memoryStream = inputStream as MemoryStream;
			if (memoryStream == null)
			{
				memoryStream = new MemoryStream();
				inputStream.CopyTo(memoryStream);
			}
			var data = memoryStream.ToArray();

			var result = GetImageFormat(data);
			if (result == ImageFormats.Unknown)
			{
				//throw new DataValidationException("Wrong format or file is corrupted");
				return false;
			}
			return true;
		}

		/// <summary>
		/// Get autogenerated file name for uploaded image
		/// </summary>
		/// <param name="originalFileName"></param>
		/// <returns></returns>
		public string GenerateFileName(string originalFileName)
		{
			return DateTime.Now.ToString("MMyyyyhmmss-fff") + Path.GetExtension(originalFileName);
		}

		/// <summary>
		/// Method for check image format 
		/// </summary>
		/// <param name="bytes">memory stream array of bytes</param>
		/// <returns>Image format as item of image formats enumeration</returns>
		private static ImageFormats GetImageFormat(byte[] bytes)
		{
			var png = new byte[] { 137, 80, 78, 71 };    // PNG     
			var jpeg = new byte[] { 255, 216, 255, 224 }; // jpeg
			var jpeg2 = new byte[] { 255, 216, 255, 225 }; // jpeg canon

			if (png.SequenceEqual(bytes.Take(png.Length)))
				return ImageFormats.Png;

			if (jpeg.SequenceEqual(bytes.Take(jpeg.Length)))
				return ImageFormats.Jpeg;

			return jpeg2.SequenceEqual(bytes.Take(jpeg2.Length)) ? ImageFormats.Jpeg : ImageFormats.Unknown;
		}
	}
}
